syntax = "proto3";

package kyve.funders.v1beta1;

import "gogoproto/gogo.proto";
import "kyve/funders/v1beta1/params.proto";

option go_package = "github.com/KYVENetwork/chain/x/funders/types";

// EventUpdateParams is an event emitted when the module parameters are updated.
// emitted_by: MsgUpdateParams
message EventUpdateParams {
  // old_params is the module's old parameters.
  Params old_params = 1 [(gogoproto.nullable) = false];
  // new_params is the module's new parameters.
  Params new_params = 2 [(gogoproto.nullable) = false];
  // payload is the parameter updates that were performed.
  string payload = 3;
}

// EventCreateFunder is an event emitted when a funder is created.
// emitted_by: MsgCreateFunder
message EventCreateFunder {
  // address is the account address of the funder.
  string address = 1;
  // moniker ...
  string moniker = 2;
  // identity is the 64 bit keybase.io identity string
  string identity = 3;
  // website ...
  string website = 4;
  // contact ...
  string contact = 5;
  // description are some additional notes the funder finds important
  string description = 6;
}

// EventUpdateFunder is an event emitted when a funder is created.
// emitted_by: MsgCreateFunder
message EventUpdateFunder {
  // address is the account address of the funder.
  string address = 1;
  // moniker ...
  string moniker = 2;
  // identity is the 64 bit keybase.io identity string
  string identity = 3;
  // website ...
  string website = 4;
  // contact ...
  string contact = 5;
  // description are some additional notes the funder finds important
  string description = 6;
}

// EventFundPool is an event emitted when a pool is funded.
// emitted_by: MsgFundPool
message EventFundPool {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the pool funder.
  string address = 2;
  // amounts is a list of coins the funder has funded
  string amounts = 3;
  // amounts_per_bundle is a list of coins the funder wants to distribute per finalized bundle
  string amounts_per_bundle = 4;
}

// EventDefundPool is an event emitted when a pool is defunded.
// emitted_by: MsgDefundPool
message EventDefundPool {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the pool funder.
  string address = 2;
  // amounts is a list of coins that the funder wants to defund
  string amounts = 3;
}

// EventPoolOutOfFunds is an event emitted when a pool has run out of funds
// emitted_by: MsgSubmitBundleProposal
message EventPoolOutOfFunds {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
}
