syntax = "proto3";

package kyve.pool.v1beta1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/KYVENetwork/chain/x/pool/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // CreatePool defines a governance operation for creating a new pool.
  // The authority is hard-coded to the x/gov module account.
  rpc CreatePool(MsgCreatePool) returns (MsgCreatePoolResponse);
  // UpdatePool defines a governance operation for updating an existing pool.
  // The authority is hard-coded to the x/gov module account.
  rpc UpdatePool(MsgUpdatePool) returns (MsgUpdatePoolResponse);
  // DisablePool defines a governance operation for disabling an existing pool.
  // The authority is hard-coded to the x/gov module account.
  rpc DisablePool(MsgDisablePool) returns (MsgDisablePoolResponse);
  // EnablePool defines a governance operation for enabling an existing pool.
  // The authority is hard-coded to the x/gov module account.
  rpc EnablePool(MsgEnablePool) returns (MsgEnablePoolResponse);
  // ScheduleRuntimeUpgrade defines a governance operation for scheduling a runtime upgrade.
  // The authority is hard-coded to the x/gov module account.
  rpc ScheduleRuntimeUpgrade(MsgScheduleRuntimeUpgrade) returns (MsgScheduleRuntimeUpgradeResponse);
  // CancelRuntimeUpgrade defines a governance operation for cancelling a runtime upgrade.
  // The authority is hard-coded to the x/gov module account.
  rpc CancelRuntimeUpgrade(MsgCancelRuntimeUpgrade) returns (MsgCancelRuntimeUpgradeResponse);
  // UpdateParams defines a governance operation for updating the x/pool module
  // parameters. The authority is hard-coded to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreatePool defines a SDK message for creating a new pool.
message MsgCreatePool {
  option (cosmos.msg.v1.signer) = "authority";
  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // name ...
  string name = 2;
  // runtime ...
  string runtime = 3;
  // logo ...
  string logo = 4;
  // config ...
  string config = 5;
  // start_key ...
  string start_key = 6;
  // upload_interval ...
  uint64 upload_interval = 7;
  // inflation_share_weight ...
  string inflation_share_weight = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // min_delegation ...
  uint64 min_delegation = 9;
  // max_bundle_size ...
  uint64 max_bundle_size = 10;
  // version ...
  string version = 11;
  // binaries ...
  string binaries = 12;
  // storage_provider_id ...
  uint32 storage_provider_id = 13;
  // compression_id ...
  uint32 compression_id = 14;
  // end_key ...
  string end_key = 15;
}

// MsgCreatePoolResponse defines the Msg/CreatePool response type.
message MsgCreatePoolResponse {}

// MsgUpdatePool defines a SDK message for updating an existing pool.
message MsgUpdatePool {
  option (cosmos.msg.v1.signer) = "authority";
  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // id ...
  uint64 id = 2;
  // payload ...
  string payload = 3;
}

// MsgUpdatePoolResponse defines the Msg/UpdatePool response type.
message MsgUpdatePoolResponse {}

// MsgDisablePool defines a SDK message for disabling an existing pool.
message MsgDisablePool {
  option (cosmos.msg.v1.signer) = "authority";
  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // id ...
  uint64 id = 2;
}

// MsgDisablePoolResponse defines the Msg/DisablePool response type.
message MsgDisablePoolResponse {}

// MsgEnablePool defines a SDK message for enabling an existing pool.
message MsgEnablePool {
  option (cosmos.msg.v1.signer) = "authority";
  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // id ...
  uint64 id = 2;
}

// MsgEnablePoolResponse defines the Msg/EnablePool response type.
message MsgEnablePoolResponse {}

// MsgScheduleRuntimeUpgrade defines a SDK message for scheduling a runtime upgrade.
message MsgScheduleRuntimeUpgrade {
  option (cosmos.msg.v1.signer) = "authority";
  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // runtime ...
  string runtime = 2;
  // version ...
  string version = 3;
  // scheduled_at ...
  uint64 scheduled_at = 4;
  // duration ...
  uint64 duration = 5;
  // binaries ...
  string binaries = 6;
}

// MsgScheduleRuntimeUpgradeResponse defines the Msg/ScheduleRuntimeUpgrade response type.
message MsgScheduleRuntimeUpgradeResponse {}

// MsgCancelRuntimeUpgrade defines a SDK message for cancelling a runtime upgrade.
message MsgCancelRuntimeUpgrade {
  option (cosmos.msg.v1.signer) = "authority";
  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // runtime ...
  string runtime = 2;
}

// MsgCancelRuntimeUpgradeResponse defines the Msg/CancelRuntimeUpgrade response type.
message MsgCancelRuntimeUpgradeResponse {}

// MsgUpdateParams defines a SDK message for updating the module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // payload defines the x/stakers parameters to update.
  string payload = 2;
}

// MsgUpdateParamsResponse defines the Msg/UpdateParams response type.
message MsgUpdateParamsResponse {}
