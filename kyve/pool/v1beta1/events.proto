syntax = "proto3";

package kyve.pool.v1beta1;

import "gogoproto/gogo.proto";
import "kyve/pool/v1beta1/params.proto";

option go_package = "github.com/KYVENetwork/chain/x/pool/types";

// EventUpdateParams is an event emitted when the module parameters are updated.
// emitted_by: MsgUpdateParams
message EventUpdateParams {
  // old_params is the module's old parameters.
  kyve.pool.v1beta1.Params old_params = 1 [(gogoproto.nullable) = false];
  // new_params is the module's new parameters.
  kyve.pool.v1beta1.Params new_params = 2 [(gogoproto.nullable) = false];
  // payload is the parameter updates that were performed.
  string payload = 3;
}

// EventCreatePool ...
// emitted_by: EndBlock(gov)
message EventCreatePool {
  // id is the unique ID of the pool.
  uint64 id = 1;
  // name is the human readable name of the pool
  string name = 2;
  // runtime is the runtime name of the pool
  string runtime = 3;
  // logo is the logo url of the pool
  string logo = 4;
  // config is either a json stringified config or an
  // external link pointing to the config
  string config = 5;
  // start_key is the first key the pool should start
  // indexing
  string start_key = 6;
  // upload_interval is the interval the pool should validate
  // bundles with
  uint64 upload_interval = 7;
  // inflation_share_weight is the fixed cost which gets paid out
  // to every successful uploader
  string inflation_share_weight = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // min_delegation is the minimum amount of $KYVE the pool has
  // to have in order to produce bundles
  uint64 min_delegation = 9;
  // max_bundle_size is the max size a data bundle can have
  // (amount of data items)
  uint64 max_bundle_size = 10;
  // version is the current version of the protocol nodes
  string version = 11;
  // binaries points to the current binaries of the protocol node
  string binaries = 12;
  // storage_provider_id is the unique id of the storage provider
  // the pool is archiving the data on
  uint32 storage_provider_id = 13;
  // compression_id is the unique id of the compression type the bundles
  // get compressed with
  uint32 compression_id = 14;
  // end_key is the last key before the pool should stop indexing, it is
  // inclusive
  string end_key = 15;
}

// EventPoolEnabled ...
// emitted_by: EndBlock(gov)
message EventPoolEnabled {
  // id is the unique ID of the affected pool.
  uint64 id = 1;
}

// EventPoolDisabled ...
// emitted_by: EndBlock(gov)
message EventPoolDisabled {
  // id is the unique ID of the affected pool.
  uint64 id = 1;
}

// EventRuntimeUpgradeScheduled ...
// emitted_by: EndBlock(gov)
message EventRuntimeUpgradeScheduled {
  // runtime is the name of the runtime that will be upgraded.
  string runtime = 1;
  // version is the new version that the runtime will be upgraded to.
  string version = 2;
  // scheduled_at is the time in UNIX seconds when the upgrade will occur.
  uint64 scheduled_at = 3;
  // duration is the amount of seconds the pool will be paused after the
  // scheduled time is reached. This will give node operators time to upgrade
  // their node.
  uint64 duration = 4;
  // binaries contain download links for prebuilt binaries (in JSON format).
  string binaries = 5;
  // affected_pools contains all IDs of pools that will be affected by this runtime upgrade.
  repeated uint64 affected_pools = 6;
}

// EventRuntimeUpgradeCancelled ...
// emitted_by: EndBlock(gov)
message EventRuntimeUpgradeCancelled {
  // runtime is the name of the runtime that will be upgraded.
  string runtime = 1;
  // affected_pools contains all IDs of pools that are affected by the
  // cancellation of this runtime upgrade.
  repeated uint64 affected_pools = 2;
}

// EventPoolUpdated ...
// emitted_by: EndBlock(gov)
message EventPoolUpdated {
  // id is the unique ID of the pool.
  uint64 id = 1;
  // raw update string
  string raw_update_string = 2;
  // name is the human readable name of the pool
  string name = 3;
  // runtime is the runtime name of the pool
  string runtime = 4;
  // logo is the logo url of the pool
  string logo = 5;
  // config is either a json stringified config or an
  // external link pointing to the config
  string config = 6;
  // upload_interval is the interval the pool should validate
  // bundles with
  uint64 upload_interval = 7;
  // inflation_share_weight is the fixed cost which gets paid out
  // to every successful uploader
  string inflation_share_weight = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // min_delegation is the minimum amount of $KYVE the pool has
  // to have in order to produce bundles
  uint64 min_delegation = 9;
  // max_bundle_size is the max size a data bundle can have
  // (amount of data items)
  uint64 max_bundle_size = 10;
  // storage_provider_id is the unique id of the storage provider
  // the pool is archiving the data on
  uint32 storage_provider_id = 11;
  // compression_id is the unique id of the compression type the bundles
  // get compressed with
  uint32 compression_id = 12;
}

// EventDefundPool is an event emitted when a pool is defunded.
// emitted_by: MsgSubmitBundleProposal
message EventPoolFundsSlashed {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the pool funder.
  string address = 2;
  // amount is the amount in ukyve the validator has lost due to the slash
  uint64 amount = 3;
}
