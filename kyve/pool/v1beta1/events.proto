syntax = "proto3";

package kyve.pool.v1beta1;

option go_package = "github.com/KYVENetwork/chain/x/pool/types";

// EventCreatePool ...
// emitted_by: EndBlock(gov)
message EventCreatePool {
  // id is the unique ID of the pool.
  uint64 id = 1;
  // name is the human readable name of the pool
  string name = 2;
  // runtime is the runtime name of the pool
  string runtime = 3;
  // logo is the logo url of the pool
  string logo = 4;
  // config is either a json stringified config or an
  // external link pointing to the config
  string config = 5;
  // start_key is the first key the pool should start
  // indexing
  string start_key = 6;
  // upload_interval is the interval the pool should validate
  // bundles with
  uint64 upload_interval = 7;
  // operating_cost is the fixed cost which gets paid out
  // to every successful uploader
  uint64 operating_cost = 8;
  // min_delegation is the minimum amount of $KYVE the pool has
  // to have in order to produce bundles
  uint64 min_delegation = 9;
  // max_bundle_size is the max size a data bundle can have
  // (amount of data items)
  uint64 max_bundle_size = 10;
  // version is the current version of the protocol nodes
  string version = 11;
  // binaries points to the current binaries of the protocol node
  string binaries = 12;
  // storage_provider_id is the unique id of the storage provider
  // the pool is archiving the data on
  uint32 storage_provider_id = 13;
  // compression_id is the unique id of the compression type the bundles
  // get compressed with
  uint32 compression_id = 14;
}

// EventFundPool is an event emitted when a pool is funded.
// emitted_by: MsgFundPool
message EventFundPool {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the pool funder.
  string address = 2;
  // amount is the amount in ukyve the funder has funded
  uint64 amount = 3;
}

// EventDefundPool is an event emitted when a pool is defunded.
// emitted_by: MsgDefundPool
message EventDefundPool {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the pool funder.
  string address = 2;
  // amount is the amount in ukyve the funder has defunded
  uint64 amount = 3;
}

// EventDefundPool is an event emitted when a pool is defunded.
// emitted_by: MsgSubmitBundleProposal
message EventPoolFundsSlashed {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
  // address is the account address of the pool funder.
  string address = 2;
  // amount is the amount in ukyve the validator has lost due to the slash
  uint64 amount = 3;
}

// EventPoolOutOfFunds is an event emitted when a pool has run out of funds
// emitted_by: MsgSubmitBundleProposal
message EventPoolOutOfFunds {
  // pool_id is the unique ID of the pool.
  uint64 pool_id = 1;
}
