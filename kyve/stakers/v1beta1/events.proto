syntax = "proto3";

package kyve.stakers.v1beta1;

import "gogoproto/gogo.proto";
import "kyve/stakers/v1beta1/params.proto";

option go_package = "github.com/KYVENetwork/chain/x/stakers/types";

// EventUpdateParams is an event emitted when the module parameters are updated.
// emitted_by: MsgUpdateParams
message EventUpdateParams {
  // old_params is the module's old parameters.
  kyve.stakers.v1beta1.Params old_params = 1 [(gogoproto.nullable) = false];
  // new_params is the module's new parameters.
  kyve.stakers.v1beta1.Params new_params = 2 [(gogoproto.nullable) = false];
  // payload is the parameter updates that were performed.
  string payload = 3;
}

// EventCreateStaker is an event emitted when a protocol node stakes in a pool.
// emitted_by: MsgCreateStaker
message EventCreateStaker {
  // staker is the account address of the protocol node.
  string staker = 1;
  // amount ...
  uint64 amount = 2;
  // commission
  string commission = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

// EventUpdateMetadata is an event emitted when a protocol node updates their metadata.
// emitted_by: MsgUpdateMetadata
message EventUpdateMetadata {
  // staker is the account address of the protocol node.
  string staker = 1;
  // moniker ...
  string moniker = 2;
  // website ...
  string website = 3;
  // identity ...
  string identity = 4;
  // security_contact ...
  string security_contact = 5;
  // details ...
  string details = 6;
}

// EventUpdateCommission ...
// emitted_by: EndBlock
message EventUpdateCommission {
  // staker is the account address of the protocol node.
  string staker = 1;
  // commission ...
  string commission = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

// EventClaimCommissionRewards ...
// emitted_by: MsgClaimCommissionRewards
message EventClaimCommissionRewards {
  // staker is the account address of the protocol node.
  string staker = 1;
  // amounts is the amount of the commission rewards claimed
  string amounts = 2;
}

// EventJoinPool ...
// emitted_by: MsgJoinPool
message EventJoinPool {
  // pool_id is the pool the staker joined
  uint64 pool_id = 1;
  // staker is the address of the staker
  string staker = 2;
  // valaddress is the address of the protocol node which
  // votes in favor of the staker
  string valaddress = 3;
  // amount is the amount of funds transferred to the valaddress
  uint64 amount = 4;
}

// EventLeavePool ...
// emitted_by: EndBlock
message EventLeavePool {
  // pool_id ...
  uint64 pool_id = 1;
  // staker ...
  string staker = 2;
}
