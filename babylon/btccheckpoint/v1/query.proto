syntax = "proto3";
package babylon.btccheckpoint.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "babylon/btccheckpoint/v1/params.proto";
import "babylon/btccheckpoint/v1/btccheckpoint.proto";

option go_package = "github.com/babylonchain/babylon/x/btccheckpoint/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/babylon/btccheckpoint/v1/params";
  }

  // BtcCheckpointInfo returns checkpoint info for a given epoch
  rpc BtcCheckpointInfo(QueryBtcCheckpointInfoRequest)
      returns (QueryBtcCheckpointInfoResponse) {
    option (google.api.http).get = "/babylon/btccheckpoint/v1/{epoch_num}";
  }

  // BtcCheckpointsInfo returns checkpoint info for a range of epochs
  rpc BtcCheckpointsInfo(QueryBtcCheckpointsInfoRequest)
      returns (QueryBtcCheckpointsInfoResponse) {
    option (google.api.http).get = "/babylon/btccheckpoint/v1";
  }

  // EpochSubmissions returns all submissions for a given epoch
  rpc EpochSubmissions(QueryEpochSubmissionsRequest)
      returns (QueryEpochSubmissionsResponse) {
    option (google.api.http).get =
        "/babylon/btccheckpoint/v1/{epoch_num}/submissions";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryBtcCheckpointInfoRequest defines the query to get the best checkpoint
// for a given epoch
message QueryBtcCheckpointInfoRequest {
  // Number of epoch for which the earliest checkpointing btc height is
  // requested
  uint64 epoch_num = 1;
}

// QueryBtcCheckpointInfoResponse is response type for the
// Query/BtcCheckpointInfo RPC method
message QueryBtcCheckpointInfoResponse { BTCCheckpointInfo info = 1; }

// QueryBtcCheckpointsInfoRequest is request type for the
// Query/BtcCheckpointsInfo RPC method
message QueryBtcCheckpointsInfoRequest {
  // pagination defines whether to have the pagination in the request
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryBtcCheckpointsInfoResponse is response type for the
// Query/BtcCheckpointsInfo RPC method
message QueryBtcCheckpointsInfoResponse {
  repeated BTCCheckpointInfo info_list = 1;
  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryEpochSubmissionsRequest defines a request to get all submissions in
// given epoch
message QueryEpochSubmissionsRequest {
  // Number of epoch for which submissions are requested
  uint64 epoch_num = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryEpochSubmissionsResponse defines a response to get all submissions in
// given epoch (QueryEpochSubmissionsRequest)
message QueryEpochSubmissionsResponse {
  // All submissions saved during an epoch.
  repeated SubmissionKey keys = 1;

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
