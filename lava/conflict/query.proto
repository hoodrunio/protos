syntax = "proto3";
package lavanet.lava.conflict;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "conflict/params.proto";
import "conflict/conflict_vote.proto";
// this line is used by starport scaffolding # 1
import "gogoproto/gogo.proto";

option go_package = "github.com/lavanet/lava/x/conflict/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/lavanet/lava/conflict/params";
  }
  // Queries a ConflictVote by index.
	rpc ConflictVote(QueryGetConflictVoteRequest) returns (QueryGetConflictVoteResponse) {
		option (google.api.http).get = "/lavanet/lava/conflict/conflict_vote/{index}";
	}

	// Queries a list of ConflictVote items.
	rpc ConflictVoteAll(QueryAllConflictVoteRequest) returns (QueryAllConflictVoteResponse) {
		option (google.api.http).get = "/lavanet/lava/conflict/conflict_vote";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetConflictVoteRequest {
	  string index = 1;

}

message QueryGetConflictVoteResponse {
	ConflictVote conflictVote = 1 [(gogoproto.nullable) = false];
}

message QueryAllConflictVoteRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllConflictVoteResponse {
	repeated ConflictVote conflictVote = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
